#include <iostream>

using namespace std;

const int MAX_PROCESSES = 10;
const int MAX_RESOURCES = 10;

// Function to check if the current process can be executed or not
bool isSafe(int available[], int max[][MAX_RESOURCES], int allocation[][MAX_RESOURCES], bool finish[], int processCount, int resourceCount) {
    int work[MAX_RESOURCES];
    bool safe[MAX_PROCESSES] = {false};
    int count = 0;

    // Initialize work array with available resources
    for (int i = 0; i < resourceCount; ++i) {
        work[i] = available[i];
    }

    while (count < processCount) {
        bool found = false;

        for (int i = 0; i < processCount; ++i) {
            if (!finish[i]) {
                bool canExecute = true;
                for (int j = 0; j < resourceCount; ++j) {
                    if (max[i][j] - allocation[i][j] > work[j]) {
                        canExecute = false;
                        break;
                    }
                }

                if (canExecute) {
                    // Mark process as finished and update work array
                    for (int j = 0; j < resourceCount; ++j) {
                        work[j] += allocation[i][j];
                    }
                    safe[i] = true;
                    finish[i] = true;
                    ++count;
                    found = true;
                }
            }
        }

        if (!found) {
            break;
        }
    }

    // Check if all processes have finished
    for (int i = 0; i < processCount; ++i) {
        if (!finish[i]) {
            return false;
        }
    }

    return true;
}

// Function to simulate Banker's Algorithm
void bankersAlgorithm(int available[], int max[][MAX_RESOURCES], int allocation[][MAX_RESOURCES], int processCount, int resourceCount) {
    bool finish[MAX_PROCESSES] = {false};

    if (isSafe(available, max, allocation, finish, processCount, resourceCount)) {
        cout << "Safe Sequence: ";
        for (int i = 0; i < processCount; ++i) {
            cout << i << " ";
        }
        cout << endl;
    } else {
        cout << "No Safe Sequence\n";
    }
}

int main() {
    int processCount, resourceCount;

    cout << "Enter number of processes: ";
    cin >> processCount;
    cout << "Enter number of resources: ";
    cin >> resourceCount;

    int available[MAX_RESOURCES];

    cout << "Enter available instances of each resource:\n";
    for (int i = 0; i < resourceCount; ++i) {
        cin >> available[i];
    }

    int max[MAX_PROCESSES][MAX_RESOURCES];
    int allocation[MAX_PROCESSES][MAX_RESOURCES];

    cout << "Enter maximum demand of each process:\n";
    for (int i = 0; i < processCount; ++i) {
        cout << "Process " << i << ": ";
        for (int j = 0; j < resourceCount; ++j) {
            cin >> max[i][j];
        }
    }

    cout << "Enter allocation of each process:\n";
    for (int i = 0; i < processCount; ++i) {
        cout << "Process " << i << ": ";
        for (int j = 0; j < resourceCount; ++j) {
            cin >> allocation[i][j];
        }
    }

    bankersAlgorithm(available, max, allocation, processCount, resourceCount);

    return 0;
}
